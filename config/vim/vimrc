"-----------------------------------------------------------------------
" .vimrc
"-----------------------------------------------------------------------

set t_Co=256
if &t_Co > 2                " check for multi colors
    syntax on                    " colored syntax
endif

"== Options ====================================================== {{{
set exrc          " use local .exrc file
set autowrite     " autosave before changing window or shellcmd
set ignorecase  " search case sensitive
set tabstop=4     " tab 4 chars (ts)
set shiftwidth=2  " autoindent to 4 chars
set expandtab
set nobackup
set bs=2          " allow backspacing in insert mode
set nocompatible  " not compatible with vi
set history=50    " keeps command history
set ruler         " show cursor position always
set showmode
set showcmd
set showmatch     " match parens, brackets in insert mode
set hlsearch      " search pattern highlighting
set mousehide     " hide mouse pointer while typing
set errorbells    " turn on bells
set visualbell    " some kind of visual bell warning
set modeline      " enable .exrc cmds inside file being edited
set modelines=5   " number of lines at top to be checked
set formatoptions=tcrq
                  " r is non-default but important! (:h fo-table)
set nocursorline
set nocursorcolumn
set hidden
set autoindent    " Mimic previous line
set incsearch     " Show found string as it's being typed
set nojoinspaces  " I prefer that *one* space is inserted upon `join' (j)
set nolinebreak   " Wrap long lines (breakat) -- do not insert <EOL>s
                  "   only affects the way the file is displayed
set nosmartindent " Too smart for text
set nosmarttab    " Too smart for text
set textwidth=78  " Insert <EOL> when reaching this column
set wrap          " Display long lines wrapped
set wrapmargin=0  " Like `textwidth' but use instead (from right border)
set suffixes=.bak,~,.o,.info,.swp,.swp,.pc,.pcl,.aux,.dvi,.log,.toc
set hidden
set nrformats-=octal  " Enable in/decrementing with ^A/^X with leading 0s

set lazyredraw    " Don't redraw while executing macros (better performance)
" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Swap file are good for knowing if a file is open elsewhere.
"set noswapfile

"set relativenumber
" Cool, but messes up urxvt copying (extra trailing spaces)
"set colorcolumn=80

set number
set numberwidth=3

set mouse=

" http://vim.1045645.n5.nabble.com/Search-within-results-from-More-prompt-td5710213.html
set wildmenu
set wildmode=longest:full,full

" Get out of insert-mode without (perceived) delay
" http://ksjoberg.com/vim-esckeys.html
set noesckeys

" Folding
set foldenable
set foldmethod=marker

" Set very-'magic' permanently (no need to specify \v in pattern)
" http://stackoverflow.com/questions/3760444/in-vim-is-there-a-way-to-set-very-magic-permanently-and-globally
cnoremap s/ s/\v

" Seems these all need to be in vimrc due to order of vimclojure.
let vimfiles = $HOME . "/.vim"

" Indent guides: https://github.com/nathanaelkane/vim-indent-guides
let g:indent_guides_auto_colors = 0
let g:indent_guides_enable_on_vim_startup = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=233
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=234

let mapleader = ","
let maplocalleader = ","

set tags=./tags,./TAGS,tags,TAGS,./tmp/tags,../tags

""" Cursor

set guicursor=a:blinkwait0,a:block-cursor

" Mitigate annoying delay on Esc:
" http://superuser.com/questions/246540/vim-delay-when-exiting-visual-mode
set timeoutlen=600 " ms

" http://vim.wikia.com/wiki/Configuring_the_cursor
if &term =~ "xterm\\|rxvt"
  " Insert
  let &t_SI = "\<Esc>]12;white\x7"
  let &t_SI .= "\<Esc>[3 q"
  " Normal
  let &t_EI = "\<Esc>]12;green\x7"
  let &t_EI .= "\<Esc>[2 q"
  autocmd VimLeave * silent !echo -ne "\033]112\007"
endif

setlocal spell spelllang=en_us
set nospell
set spellfile=~/.vim/en.utf-8.add
" }}}

"== GUI (instead of having a gvimrc) ============================= {{{
set guioptions=acegi
" }}}

"== Vundle ======================================================= {{{
" To install these, run from shell: vim +BundleInstall +qall

filetype off  " required for vundle!
set rtp+=~/.vim/bundle/vundle
call vundle#rc()

" let Vundle manage Vundle; required!
Bundle 'gmarik/vundle'

Bundle 'vim-scripts/Color-Sampler-Pack'

Bundle 'kien/ctrlp.vim'
Bundle 'tpope/vim-markdown'
Bundle 'nelstrom/vim-markdown-folding'
Bundle 'juvenn/mustache.vim'
Bundle 'nono/vim-handlebars'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Bundle 'kien/rainbow_parentheses.vim'
Bundle 'vim-scripts/ck.vim'
Bundle 'tomtom/tlib_vim'
Bundle 'vim-scripts/transpose-words'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-liquid'
Bundle 'tpope/vim-abolish'
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'jeetsukumaran/vim-buffergator'
Bundle 'kchmck/vim-coffee-script'
Bundle 'gkz/vim-ls'
Bundle 'jelera/vim-javascript-syntax'
Bundle 'vim-scripts/vim-json-bundle'
Bundle 'groenewege/vim-less'
Bundle 'slim-template/vim-slim'
Bundle 'digitaltoad/vim-jade'
Bundle 'MicahElliott/vim-powerline'
Bundle 'stephenmckinney/vim-solarized-powerline'
Bundle 'jpalardy/vim-slime'
" Visual block editing (mirror):
" http://vim.wikia.com/wiki/Applying_substitutes_to_a_visual_block
Bundle 'taku-o/vim-vis'
Bundle 'vim-scripts/AnsiEsc.vim'
Bundle 'sickill/vim-monokai'
Bundle 'tomasr/molokai'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'godlygeek/tabular'

" FIXME: Might not want autoclose
Bundle 'Townk/vim-autoclose'

" Too complex to setup, maybe
"Bundle 'Shougo/neocomplete.vim'


"-- Gists ------------------------------------------------------------
Bundle 'MicahElliott/UniCycle.git'
" Vim ‚Äúadobe‚Äù color scheme
"Bundle 'http://gist.github.com/720355.git'


filetype plugin indent on     " required!
" }}}

"== Override settings ============================================ {{{

" Not sure if these are doing anything.
let g:SuperTabMappingForward = '<C-Space>'
let g:SuperTabMappingBackward = '<S-C-Space>'

let g:buffergator_suppress_keymaps = 1
let g:buffergator_display_regime = "bufname"
let g:buffergator_sort_regime = "mru"
let g:buffergator_viewport_split_policy = "L" "left

" CtrlP
"set wildignore+=*/tmp*,*.swp,/vendor
set wildignore+=*/node_modules/*,*/build/*,*/components/*,*/_public/*,*/tmp/*
"let g:ctrlp_custom_ignore = '\v[\/]node_modules$'
let g:ctrlp_use_caching = 1
let g:ctrlp_dotfiles = 1
let g:ctrlp_max_depth = 6
let g:ctrlp_max_height = 50
let g:ctrlp_switch_buffer = 2
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_extensions = ['dir']
" Open *h*orizontally and *j*ump to first win.
let g:ctrlp_open_multiple_files = 'hj'

" Set root to CWD. Another good option is 'r' for VCS mode.
let g:ctrlp_working_path_mode = 0

" NERDCommenter
let g:NERDCreateDefaultMappings = 0
let g:NERDTreeWinSize = 22

" EnhancedCommentify visual bindings:
" http://stackoverflow.com/questions/1676632/whats-a-quick-way-to-comment-uncomment-lines-in-vim
" But not using EnhancedCommentify since NERDCommenter is superior.
"let g:EnhCommentifyUserBindings='Yes'

let g:slime_target = "tmux"
let g:slime_paste_file = "$HOME/.slime_paste"

let syntastic_enable_signs = 1
"let syntastic_auto_jump = 1

" }}}

"== Color Schemes ================================================ {{{
" Listed in order of preference.
"let g:molokai_original = 1
colorscheme molokai
" Has some molokai overrides to remove bad recording red
colorscheme comments
colorscheme missing
colorscheme overrides

let Powerline_symbols = 'unicode'
"let Powerline_symbols = 'fancy'
let g:Powerline_colorscheme='solarized256_light'

" Catching bad whitespace.
match ExtraWhitespace /\s\+$/
" }}}

"== Register Macros ============================================== {{{
" http://vim.wikia.com/wiki/Macros

" Commify/Uncommify: John Doe -> Doe, John
let @c='dWf:i, pxa'
let @v='dWA phDa'

" first initial, Last name
" John Doe -> jdoe
let @w='ylA: pByw$pBgu$a'

" Full name with underscore: John Doe -> john_doe
let @u='y$A: pBhr_Bgu$a'

"  John Doe -> johnd
let @y='A:0yWA pBByf:ApxBlDXBgu$a'

" John Doe -> doej
let @e='A:  BlDXBgu$a'

" Downcase just the email
let @d='f:gu$a'

" }}}

"== Map (Leader) ================================================= {{{

nnoremap <Space> za

" Fast saving
nmap <leader>w :w!<cr>

" Tabular
" http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
" I suppose `a` is for "align"
if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:\zs<CR>
  vmap <Leader>a: :Tabularize /:\zs<CR>
endif

" eXchange words
" https://github.com/vim-scripts/transpose-words
nmap <Leader>x <Plug>Transposewords

nmap <C-w>o <C-w>_

nmap <buffer> dl :Conflict2DiffGetLeft<CR>
nmap <buffer> dr :Conflict2DiffGetRight<CR>
nmap <buffer> dq :Conflict2DiffFinish<CR>

if &diff
    colorscheme ron
endif

" Clear the hlsearch.
nmap <leader>z :noh<CR>

" BufExplorer
"map <Leader>b :BufExplorerHorizontalSplit<CR>

" NERDTree
" Explore (using NT)
nmap <Leader>n :NERDTreeToggle<CR>

nmap <Leader>e :lwindow<CR>
nmap <Leader>E :lclose<CR>
"nmap <Leader>e :llist<CR>

" Ack (grep)
nmap <Leader>g :Ack! 
"let g:ackprg="ack-grep -H --nocolor --nogroup --column"
set grepprg=ack\ -a

nmap <Leader>s :SyntasticCheck<CR>

nmap <Leader>b :BuffergatorToggle<CR>
" BuffersGatorToggle not working for some reason
nmap <Leader>t :BuffergatorTabsOpen<CR>
nmap <Leader>T :BuffergatorTabsClose<CR>

map <Leader>k <plug>NERDCommenterToggle

nmap <S-q> :CtrlPMRU<CR>

nmap <Leader>q <C-W>q

" UniCycle typography
map <Leader>u :UniCycleToggle<CR>

" }}}

"== Window Navigation ============================================ {{{
map <Leader>1 <C-W>1w
map <Leader>2 <C-W>2w
map <Leader>3 <C-W>3w
map <Leader>4 <C-W>4w
"map <Leader>p <C-W>p

" Resize windows (hmm, arrow keys not working)
nnoremap <C-J> 2<C-W>+
nnoremap <C-K> 2<C-W>-
"nnoremap <C-Left> <C-W>2>
"nnoremap <C-Right> <C-W>2<

" Start new tab with Explorer.
"nmap <C-N> :tabnew<C-M><leader>f
"nmap <C-N> :tabnew<C-M><Leader>e
nmap <C-N> :10tab tabnew<C-M>

inoremap <C-l> <C-x><C-l>
inoremap <C-f> <C-x><C-f>
" }}}

"== Abbreviation ================================================= {{{
"iabbr :) ‚òª
iabbr (c) ¬©

iabbr js JavaScript
iabbr ls LiveScript
" }}}

"== Autocmd ====================================================== {{{
" au! " remove existing auto-commands to avoid double-sourcing
if has("autocmd")
" Use the skeletons
au BufNewFile *.cpp,*.C,*.cxx,*.cc r ~/.vim/skel/skel.cpp | source ~/.vim/skel/skel.cpp.sh
au BufNewFile *.c read ~/.vim/skel/skel.c | source ~/.vim/skel/skel.c.sh
au BufNewFile *.h read ~/.vim/skel/skel.h | source ~/.vim/skel/skel.h.sh
au BufNewFile *.py  0read ~/.vim/skel/skel.py
au BufNewFile *.rb  0read ~/.vim/skel/skel.rb
au BufNewFile *.coffee,*.cf,*.co,*.cs  0read ~/.vim/skel/skel.coffee'
au BufNewFile *.ls  0read ~/.vim/skel/skel.ls
au BufNewFile *.zsh,*.z  0read ~/.vim/skel/skel.zsh
au BufNewFile makefile read ~/.vim/skel/skel.mk | source ~/.vim/skel/skel.mk.sh
au BufNewFile *.docbook,*.docbk,*.db 0r ~/.vim/skel/skel.docbook
au BufNewFile *.html 0r ~/.vim/skel/skel.html
au BufNewFile *.jade 0r ~/.vim/skel/skel.jade
endif " if has("autocmd")


set previewheight=50
au BufEnter ?* call PreviewHeightWorkAround()
func! PreviewHeightWorkAround()
    if &previewwindow
        exec 'setlocal winheight='.&previewheight
    endif
endfunc
" }}}

"== Tab Navigation =============================================== {{{
" Tabbing like Firefox, xterm only.
map <M-1> 1gt
map <M-2> 2gt
map <M-3> 3gt
map <M-4> 4gt
map <M-5> 5gt
map <M-6> 6gt
map <M-7> 7gt
map <M-8> 8gt
map <M-9> 9gt
" Tabbing, for rxvt-unicode/urxvt for alt/meta recognition
nmap 1 1gt
nmap 2 2gt
nmap 3 3gt
nmap 4 4gt
nmap 5 5gt
nmap 6 6gt
nmap 7 7gt
nmap 8 8gt
nmap 9 9gt

"###################################
" Return to previously visited tab (<alt><tab>).
" http://vim.1045645.n5.nabble.com/jump-to-last-visited-tabpage-td1172955.html
nmap <Tab> :exe "tabn " . g:ltv<CR>
" referred to by TabLeave autocmd.
function! Setlasttabpagevisited()
  let g:ltv = tabpagenr()
endfunction
augroup localtl
" Remove all localtl autocommands
au!
" keep tally of the last tab page visited.
autocmd TabLeave * call Setlasttabpagevisited()
augroup END
autocmd VimEnter * let g:ltv = 1
"##################################
" }}}

"== Function key mappings ======================================== {{{

map <F2> :set cursorcolumn<CR>:set cursorline<CR>:set colorcolumn=80<CR>
map <F3> :set nocursorcolumn<CR>:set nocursorline<CR>:set colorcolumn=0<CR>
nnoremap <F5> "=strftime("%F")<CR>P
" Won't work; don't know why!
"inoremap <F5> <C-R>=strftime("%F")<CR>
map <F8> :set paste!<CR>
map <F9> :set spell!<CR>

" http://vim.wikia.com/wiki/Identify_the_syntax_highlighting_group_used_at_the_cursor
map <F12> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
  \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
  \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
" }}}

"== Colors ======================================================= {{{
" See overrides.vim for more usage.
" Molokai:
" 161     pink (red)
" 166/208 orange
" 226     yellow (not actually in molokai)
" 81      cyan
" 118     green
" 67      blue
" 135     purple
" Additions:
" 52      darkred
" 94      darkyellow (brown)
" 28      darkgreen
" 25      darkblue
" 92      darkpurple

"      vim            gvim
let g:rbpt_colorpairs = [
    \ ['92',  'RoyalBlue3'],
    \ ['161', 'SeaGreen3'],
    \ ['118', 'DarkOrchid3'],
    \ ['135', 'firebrick3'],
    \ ['81',  'RoyalBlue3'],
    \ ['166', 'SeaGreen3'],
    \ ['67',  'DarkOrchid3'],
    \ ['226', 'firebrick3'],
    \ ['92',  'RoyalBlue3'],
    \ ['161', 'SeaGreen3'],
    \ ['118', 'DarkOrchid3'],
    \ ['135', 'firebrick3'],
    \ ['81',  'RoyalBlue3'],
    \ ['166', 'SeaGreen3'],
    \ ['67',  'DarkOrchid3'],
    \ ['226', 'firebrick3'],
    \ ]
" outermost parens is last entry
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
 \ if line("'\"") > 0 && line("'\"") <= line("$") |
 \   exe "normal! g`\"" |
 \ endif
" Remember info about open buffers on close
set viminfo^=%

" }}}

"== Obscure overrides of Vim builtins ============================ {{{

"se lines=12
" http://www.shallowsky.com/linux/noaltscreen.html
" Make vim not clear screen on exit.
set t_ti= t_te=
" vimpager stuff: https://github.com/rkitover/vimpager/
" not sure what these really do
let vimpager_disable_x11 = 1
let vimpager_scrolloff = 5

" Two ways to address inotify problems. See vim docs to understand their
" repercussions, which AFAICT are none.
"se backupcopy=yes
set nowritebackup
" }}}
